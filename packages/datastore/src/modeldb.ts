/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2017, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
import {
  IIterable, IIterator, IterableOrArrayLike
} from '@phosphor/algorithm';

import {
  JSONArray, JSONObject, ReadonlyJSONValue, Token
} from '@phosphor/coreutils';

import {
  IDisposable
} from '@phosphor/disposable';


/**
 * A type alias for a primitive immutable object in a model db.
 */
export
type DBPrimitive = ReadonlyJSONValue;


/**
 * A type alias for the base db object changed args.
 *
 * #### Notes
 * All change notifications will include at least this data.
 */
export
type BaseChangedArgs = {
  /**
   * Whether the change was generated by an undo action.
   */
  readonly isUndo: boolean;

  /**
   * Whether the change was generated by a redo action.
   */
  readonly isRedo: boolean;

  /**
   * Whether the change was generated by the local application.
   */
  readonly isLocal: boolean;

  /**
   * The id of the user which generated the change.
   */
  readonly userId: string;

  /**
   * The id of the session which generated the change.
   */
  readonly sessionId: string;
};


/**
 * An observable DB object which holds a list of primitives.
 */
export
interface IDBList<T extends DBPrimitive = DBPrimitive> extends IIterable<T> {
  /**
   * The unique ID for the list.
   *
   * #### Complexity
   * Constant.
   */
  readonly id: string;

  /**
   * The length of the list.
   *
   * #### Complexity
   * Constant.
   */
  readonly length: string;

  /**
   * Whether the list is empty.
   *
   * #### Complexity
   * Constant.
   */
  readonly isEmpty: boolean;

  /**
   * The first value in the list or `undefined` if the list is empty.
   *
   * #### Complexity
   * Constant.
   */
  readonly first: T | undefined;

  /**
   * The last value in the list or `undefined` if the list is empty.
   *
   * #### Complexity
   * Constant.
   */
  readonly last: T | undefined;

  /**
   * Convert the list to a JSON array representation.
   *
   * @returns A new JSON array representation of the list.
   *
   * #### Complexity
   * Linear.
   */
  toJSON(): JSONArray;

  /**
   * Subscribe to changes on the list.
   *
   * @param callback - The callback to invoke when the list changes.
   *
   * @returns A disposable which will unsubscribe the callback.
   */
  subscribe(callback: (args: IDBList.ChangedArgs<T>) => void): IDisposable;

  /**
   * Create an iterator over the reversed list contents.
   *
   * @returns A new iterator which traverses the list in reverse.
   *
   * #### Complexity
   * Constant.
   */
  reversed(): IIterator<T>;

  /**
   * Get the value at a specified index.
   *
   * @param index - The integer index of interest. Negative values are
   *   taken as an offset from the end of the list.
   *
   * @returns The value at the specified index or `undefined` if the
   *   index is out of range.
   *
   * #### Complexity
   * Constant.
   *
   * #### Undefined Behavior
   * An `index` which is non-integral.
   */
  get(index: number): T | undefined;

  /**
   * Find the index of the first occurrence of a value in the list.
   *
   * @param value - The value to locate in the list. Values are
   *   compared using strict `===` equality.
   *
   * @param start - The index of the first element in the range to be
   *   searched, inclusive. The default value is `0`. Negative values
   *   are taken as an offset from the end of the list.
   *
   * @param stop - The index of the last element in the range to be
   *   searched, inclusive. The default value is `-1`. Negative values
   *   are taken as an offset from the end of the list.
   *
   * @returns The index of the first occurrence of the value, or `-1`
   *   if the value is not found.
   *
   * #### Notes
   * If `stop < start` the search will wrap at the end of the list.
   *
   * #### Complexity
   * Linear.
   *
   * #### Undefined Behavior
   * A `start` or `stop` which is non-integral.
   */
  indexOf(value: T, start?: number, stop?: number): number;

  /**
   * Find the index of the last occurrence of a value in the list.
   *
   * @param value - The value to locate in the list. Values are
   *   compared using strict `===` equality.
   *
   * @param start - The index of the first element in the range to be
   *   searched, inclusive. The default value is `-1`. Negative values
   *   are taken as an offset from the end of the list.
   *
   * @param stop - The index of the last element in the range to be
   *   searched, inclusive. The default value is `0`. Negative values
   *   are taken as an offset from the end of the list.
   *
   * @returns The index of the last occurrence of the value, or `-1`
   *   if the value is not found.
   *
   * #### Notes
   * If `start < stop` the search will wrap at the front of the list.
   *
   * #### Complexity
   * Linear.
   *
   * #### Undefined Behavior
   * A `start` or `stop` which is non-integral.
   */
  lastIndexOf(value: T, start?: number, stop?: number): number;

  /**
   * Find the index of the first value which matches a predicate.
   *
   * @param fn - The predicate function to apply to the values.
   *
   * @param start - The index of the first element in the range to be
   *   searched, inclusive. The default value is `0`. Negative values
   *   are taken as an offset from the end of the list.
   *
   * @param stop - The index of the last element in the range to be
   *   searched, inclusive. The default value is `-1`. Negative values
   *   are taken as an offset from the end of the list.
   *
   * @returns The index of the first matching value, or `-1` if no
   *   matching value is found.
   *
   * #### Notes
   * If `stop < start` the search will wrap at the end of the list.
   *
   * #### Complexity
   * Linear.
   *
   * #### Undefined Behavior
   * A `start` or `stop` which is non-integral.
   *
   * Modifying the length of the list while searching.
   */
  findIndex(fn: (value: T, index: number) => boolean, start?: number, stop?: number): number;

  /**
   * Find the index of the last value which matches a predicate.
   *
   * @param fn - The predicate function to apply to the values.
   *
   * @param start - The index of the first element in the range to be
   *   searched, inclusive. The default value is `-1`. Negative values
   *   are taken as an offset from the end of the list.
   *
   * @param stop - The index of the last element in the range to be
   *   searched, inclusive. The default value is `0`. Negative values
   *   are taken as an offset from the end of the list.
   *
   * @returns The index of the last matching value, or `-1` if no
   *   matching value is found.
   *
   * #### Notes
   * If `start < stop` the search will wrap at the front of the list.
   *
   * #### Complexity
   * Linear.
   *
   * #### Undefined Behavior
   * A `start` or `stop` which is non-integral.
   *
   * Modifying the length of the list while searching.
   */
  findLastIndex(fn: (value: T, index: number) => boolean, start?: number, stop?: number): number;

  /**
   * Set the value at a specified index.
   *
   * @param index - The integer index of interest. Negative values are
   *   taken as an offset from the end of the list.
   *
   * @value - The value to set at the specified index.
   *
   * #### Complexity
   * Constant.
   *
   * #### Undefined Behavior
   * An `index` which is non-integral.
   */
  set(index: number, value: T): void;

  /**
   * Move an element from one index to another.
   *
   * @param fromIndex - The index of the element to move. Negative
   *   values are taken as an offset from the end of the list.
   *
   * @param toIndex - The target index of the element. Negative
   *   values are taken as an offset from the end of the list.
   *
   * #### Complexity
   * Linear.
   *
   * #### Undefined Behavior
   * A `fromIndex` or `toIndex` which is non-integral.
   */
  move(fromIndex: number, toIndex: number): void;

  /**
   * Add a value to the end of the list.
   *
   * @param value - The value to add to the list.
   *
   * #### Complexity
   * Constant.
   */
  push(value: T): void;

  /**
   * Add multiple values to the end of the list.
   *
   * @param values - The values to add to the list.
   *
   * #### Complexity
   * Linear.
   */
  pushAll(values: IterableOrArrayLike<T>): void;

  /**
   * Insert a value into the list.
   *
   * @param index - The index at which to insert the value. Negative
   *   values are taken as an offset from the end of the list.
   *
   * @param value - The value to set at the specified index.
   *
   * #### Complexity
   * Linear.
   *
   * #### Undefined Behavior
   * An `index` which is non-integral.
   */
  insert(index: number, value: T): void;

  /**
   * Insert multiple into the list.
   *
   * @param index - The index at which to insert the values. Negative
   *   values are taken as an offset from the end of the list.
   *
   * @param value - The values to insert at the specified index.
   *
   * #### Complexity
   * Linear.
   *
   * #### Undefined Behavior
   * An `index` which is non-integral.
   */
  insertAll(index: number, values: IterableOrArrayLike<T>): void;

  /**
   * Remove a value at a specific index in the list.
   *
   * @param index - The index of the value to remove. Negative values
   *   are taken as an offset from the end of the array.
   *
   * #### Complexity
   * Linear.
   *
   * #### Undefined Behavior
   * An `index` which is non-integral.
   */
  remove(index: number): void;

  /**
   * Replace a range of values in the list.
   *
   * @param index - The index of the first element to be removed.
   *   Negative values are taken as an offset from the end of the list.
   *
   * @param count - The number of elements to remove.
   *
   * @param values - The values to insert at the specified index.
   *
   * #### Complexity
   * Linear.
   *
   * #### Undefined Behavior
   * An `index` or `count` which is non-integral.
   */
  splice(index: number, count: number, values?: IterableOrArrayLike<T>): void;

  /**
   * Clear all values from the list.
   *
   * #### Complexity
   * Linear.
   */
  clear(): void;
}


/**
 * The namespace for the `IDBList` interface statics.
 */
export
namespace IDBList {
  /**
   * The type of the db list changed arguments.
   */
  export
  type ChangedArgs<T extends DBPrimitive = DBPrimitive> = BaseChangedArgs & {
    /**
     * The type of the change.
     */
    readonly type: 'list:changed';

    /**
     * The list which generated the change.
     */
    readonly list: IDBList<T>;

    /**
     * The index of the modification.
     */
    readonly index: number;

    /**
     * The items that were added to the list.
     */
    readonly addedValues: ReadonlyArray<T>;

    /**
     * The items that were removed from the list.
     */
    readonly removedValues: ReadonlyArray<T>;
  };
}


/**
 * An observable DB object which maps string keys to primitives.
 */
export
interface IDBMap<T extends DBPrimitive = DBPrimitive> extends IIterable<[string, T]> {
  /**
   * The unique ID for the map.
   *
   * #### Complexity
   * Constant.
   */
  readonly id: string;

  /**
   * The size of the map.
   *
   * #### Complexity
   * Constant.
   */
  readonly size: string;

  /**
   * Whether the map is empty.
   *
   * #### Complexity
   * Constant.
   */
  readonly isEmpty: boolean;

  /**
   * Convert the map to a JSON object representation.
   *
   * @returns A new JSON object representation of the map.
   *
   * #### Complexity
   * Linear.
   */
  toJSON(): JSONObject;

  /**
   * Subscribe to changes on the map.
   *
   * @param callback - The callback to invoke when the map changes.
   *
   * @returns A disposable which will unsubscribe the callback.
   */
  subscribe(callback: (args: IDBMap.ChangedArgs<T>) => void): IDisposable;

  /**
   * Test whether the map has a particular key.
   *
   * @param key - The key of interest.
   *
   * @returns `true` if the map has the given key, `false` otherwise.
   *
   * #### Complexity
   * Constant.
   */
  has(key: string): boolean;

  /**
   * Get the value for a particular key in the map.
   *
   * @param key - The key of interest.
   *
   * @returns The value for the key or `undefined` if the key is not
   *   present in the map.
   *
   * #### Complexity
   * Constant.
   */
  get(key: string): T | undefined;

  /**
   * Create an iterator over the keys in the map.
   *
   * @returns A new iterator over the keys in the map.
   *
   * #### Notes
   * The order of iteration is undefined.
   *
   * #### Complexity
   * Constant.
   */
  keys(): IIterator<string>;

  /**
   * Create an iterator over the values in the map.
   *
   * @returns A new iterator over the values in the map.
   *
   * #### Notes
   * The order of iteration is undefined.
   *
   * #### Complexity
   * Constant.
   */
  values(): IIterator<T>;

  /**
   * Set the value for a particular key in the map.
   *
   * @param key - The key of interest.
   *
   * @param value - The value to set for the given key.
   *
   * #### Complexity
   * Constant.
   */
  set(key: string, value: T): void;

  /**
   * Update several values in the map.
   *
   * @param items - The `{ key: value }` pairs to update in the map.
   *
   * #### Complexity
   * Linear.
   */
  update(items: { [key: string]: T }): void;

  /**
   * Merge items into the map.
   *
   * @param items - The `[key, value]` pairs to merge into the map.
   *
   * #### Complexity
   * Linear.
   */
  merge(items: IterableOrArrayLike<[string, T]>): void;

  /**
   * Delete a specific item from the map.
   *
   * @param key - The key of the item to delete from the map.
   *
   * #### Complexity
   * Constant.
   */
  delete(key: string): void;

  /**
   * Delete multiple items from the map.
   *
   * @param keys - The keys of the items to delete from the map.
   *
   * #### Complexity
   * Linear.
   */
  deleteAll(keys: IterableOrArrayLike<string>): void;

  /**
   * Clear all items from the map.
   *
   * #### Complexity
   * Linear.
   */
  clear(): void;
}


/**
 * The namespace for the `IDBMap` interface statics.
 */
export
namespace IDBMap {
  /**
   * The type of the db map changed arguments.
   */
  export
  type ChangedArgs<T extends DBPrimitive = DBPrimitive> = BaseChangedArgs & {
    /**
     * The type of the change.
     */
    readonly type: 'map:changed';

    /**
     * The map which generated the change.
     */
    readonly map: IDBMap<T>;

    /**
     * The items that were added to the map.
     */
    readonly addedItems: { readonly [key: string]: T; };

    /**
     * The items that were removed from the map.
     */
    readonly removedItems: { readonly [key: string]: T; };
  };
}


/**
 * An observable DB object which holds a string.
 */
export
interface IDBString {
  /**
   * The unique ID for the map.
   *
   * #### Complexity
   * Constant.
   */
  readonly id: string;

  /**
   * The length of the string.
   *
   * #### Complexity
   * Constant.
   */
  readonly length: string;

  /**
   * Whether the string is empty.
   *
   * #### Complexity
   * Constant.
   */
  readonly isEmpty: boolean;

  /**
   * Convert the string to a JSON string representation.
   *
   * @returns A new JSON string representation of the string.
   *
   * #### Complexity
   * Linear.
   */
  toJSON(): string;

  /**
   * Subscribe to changes on the string.
   *
   * @param callback - The callback to invoke when the string changes.
   *
   * @returns A disposable which will unsubscribe the callback.
   */
  subscribe(callback: (args: IDBString.ChangedArgs) => void): IDisposable;

  /**
   * Get the value of the db string.
   *
   * @returns The current string value.
   */
  get(): string;

  /**
   * Set the value of the db string.
   *
   * @param value - The desired value for the string.
   */
  set(value: string): void;

  /**
   * Add text to the end of the string.
   *
   * @param value - The text to add to the end of the string.
   */
  append(value: string): void;

  /**
   * Insert text into the string.
   *
   * @param index - The index at which to insert the text.
   *
   * @param value - The text to insert into the string.
   */
  insert(index: number, value: string): void;

  /**
   * Replace a range of text in the string.
   *
   * @param index - The index of the first character to be removed.
   *   Negative values are offset from the end of the string.
   *
   * @param count - The number of characters to remove.
   *
   * @param value - The text to insert at the specified index.
   *
   * #### Undefined Behavior
   * An `index` or `count` which is non-integral.
   */
  splice(index: number, count: number, value?: string): void;

  /**
   * Clear the string.
   *
   * #### Complexity
   * Linear.
   */
  clear(): void;
}


/**
 * The namespace for the `IDBString` interface statics.
 */
export
namespace IDBString {
  /**
   * The type of the db string changed arguments.
   */
  export
  type ChangedArgs = BaseChangedArgs & {
    /**
     * The type of the change.
     */
    readonly type: 'string:changed';

    /**
     * The string which generated the change.
     */
    readonly string: IDBString;

    /**
     * The index of the modification.
     */
    readonly index: number;

    /**
     * The text that was added to the string.
     */
    readonly addedText: string;

    /**
     * The text that was removed from the string.
     */
    readonly removedText: string;
  };
}


/**
 * An observable DB object which holds well-defined state.
 */
export
type DBRecord<T extends DBRecord.State> = T & {
  /**
   * The unique ID for the record.
   *
   * #### Complexity
   * Constant.
   */
  readonly id: string;

  /**
   * Convert the record to a JSON object representation.
   *
   * @returns A new JSON object representation of the record.
   *
   * #### Complexity
   * Linear.
   */
  toJSON(): JSONObject;

  /**
   * Subscribe to changes on the record.
   *
   * @param callback - The callback to invoke when the record changes.
   *
   * @returns A disposable which will unsubscribe the callback.
   */
  subscribe(callback: (args: DBRecord.ChangedArgs<T>) => void): IDisposable;

  /**
   * Get the value for a property of the record.
   *
   * @param name - The name of the property of interest.
   *
   * @returns The value for the specified property.
   */
  get<K extends keyof T>(name: K): T[K];

  /**
   * Set the value for a property of the record.
   *
   * @param name - The name of the property of interest.
   *
   * @param value - The value for the specified property.
   */
  set<K extends keyof T>(name: K, value: T[K]): void;

  /**
   * Update multiple values for the record.
   *
   * @param state - The name/value mapping of properties to update.
   */
  update(state: Partial<T>): void;
};


/**
 * The namespace for the `DBRecord` type statics.
 */
export
namespace DBRecord {
  /**
   * A type alias for the allowed state of a db record.
   */
  export
  type State = {
    /**
     * The index signature for the state of a db record.
     */
    [key: string]: DBPrimitive | IDBList | IDBMap | IDBString;
  };

  /**
   * The type of the db record changed arguments.
   */
  export
  type RecordChangedArgs<T extends State> = BaseChangedArgs & {
    /**
     * The type of the change.
     */
    readonly type: 'record:changed';

    /**
     * The record which generated the change.
     */
    readonly record: DBRecord<T>;

    /**
     * The previous state for the modified name/value pairs.
     */
    readonly previousState: Readonly<Partial<T>>;

    /**
     * The current state for the modified name/value pairs.
     */
    readonly currentState: Readonly<Partial<T>>;
  };

  /**
   * The type of the db record child changed arguments.
   */
  export
  type ChildChangedArgs<T extends State> = BaseChangedArgs & {
    /**
     * The type of the change.
     */
    readonly type: 'record:child-changed';

    /**
     * The record which generated the change.
     */
    readonly record: DBRecord<T>;

    /**
     * The args for the child change.
     */
    readonly childArgs: IDBList.ChangedArgs | IDBMap.ChangedArgs | IDBString.ChangedArgs;
  };

  /**
   * The type of the db record changed arguments.
   */
  export
  type ChangedArgs<T extends State> = RecordChangedArgs<T> | ChildChangedArgs<T>;
}


/**
 * An observable DB object which holds records.
 */
export
interface IDBTable<T extends DBRecord.State> extends IIterable<DBRecord<T>> {
  /**
   * The unique ID for the table.
   *
   * #### Complexity
   * Constant.
   */
  readonly id: string;

  /**
   * The human readable unique name of the table.
   */
  readonly name: string;

  /**
   * The size of the table.
   *
   * #### Complexity
   * Constant.
   */
  readonly size: string;

  /**
   * Whether the table is empty.
   *
   * #### Complexity
   * Constant.
   */
  readonly isEmpty: boolean;

  /**
   * Convert the table to a JSON object representation.
   *
   * @returns A new JSON object representation of the table.
   *
   * #### Complexity
   * Linear.
   */
  toJSON(): JSONObject;

  /**
   * Subscribe to changes on the table.
   *
   * @param callback - The callback to invoke when the table changes.
   *
   * @returns A disposable which will unsubscribe the callback.
   */
  subscribe(callback: (args: IDBTable.ChangedArgs<T>) => void): IDisposable;

  /**
   * Test whether the table has a particular record.
   *
   * @param id - The record id of interest.
   *
   * @returns `true` if the table has the record, `false` otherwise.
   *
   * #### Complexity
   * Constant.
   */
  has(id: string): boolean;

  /**
   * Get the record for a particular id the table.
   *
   * @param id - The record id of interest.
   *
   * @returns The record for the id or `undefined` if the id is not
   *   present in the table.
   *
   * #### Complexity
   * Constant.
   */
  get(id: string): DBRecord<T> | undefined;

  /**
   * Insert a record into the table
   *
   * @param record - The record to insert into the table.
   *
   * #### Complexity
   * Constant.
   */
  insert(record: DBRecord<T>): void;

  /**
   * Insert multiple records into the table
   *
   * @param records - The records to insert into the table.
   *
   * #### Complexity
   * Linear.
   */
  insertAll(records: IterableOrArrayLike<DBRecord<T>>): void;

  /**
   * Delete a specific record from the table.
   *
   * @param id - The id of the record to delete from the table.
   *
   * #### Complexity
   * Constant.
   */
  delete(id: string): void;

  /**
   * Delete multiple records from the table.
   *
   * @param ids - The ids of the records to delete from the table.
   *
   * #### Complexity
   * Linear.
   */
  deleteAll(ids: IterableOrArrayLike<string>): void;

  /**
   * Clear all records from the table.
   *
   * #### Complexity
   * Linear.
   */
  clear(): void;
}


/**
 * The namespace for the `IDBTable` interface statics.
 */
export
namespace IDBTable {
  /**
   * The type of the db table changed arguments.
   */
  export
  type TableChangedArgs<T extends DBRecord.State> = BaseChangedArgs & {
    /**
     * The type of the change.
     */
    readonly type: 'table:changed';

    /**
     * The table which generated the change.
     */
    readonly table: IDBTable<T>;

    /**
     * The records that were added to the table.
     */
    readonly addedRecords: ReadonlyArray<DBRecord<T>>;

    /**
     * The records that were removed from the table.
     */
    readonly removedRecords: ReadonlyArray<DBRecord<T>>;
  };

  /**
   * The type of the db record child changed arguments.
   */
  export
  type ChildChangedArgs<T extends DBRecord.State> = BaseChangedArgs & {
    /**
     * The type of the change.
     */
    readonly type: 'table:child-changed';

    /**
     * The table which generated the change.
     */
    readonly table: IDBTable<T>;

    /**
     * The changed args for the child change.
     */
    readonly childArgs: DBRecord.ChangedArgs<T>;
  };

  /**
   * The type of the db table changed arguments.
   */
  export
  type ChangedArgs<T extends DBRecord.State> = TableChangedArgs<T> | ChildChangedArgs<T>;
}


/**
 * An object which represents a model database.
 */
export
interface IModelDB extends IIterable<IDBTable<{}>> {
  /**
   * Convert the model to a JSON object representation.
   *
   * @returns A new JSON object representation of the model.
   *
   * #### Complexity
   * Linear.
   */
  toJSON(): JSONObject;

  /**
   * Subscribe to changes on the model.
   *
   * @param callback - The callback to invoke when the model changes.
   *
   * @returns A disposable which will unsubscribe the callback.
   */
  subscribe(callback: (change: IModelDB.ChangedArgs) => void): IDisposable;

  /**
   * Create a new observable DB list.
   *
   * @param values - The initial values for the list.
   *
   * #### Notes
   * The list will not emit change notifications unless it is added
   * to a record which itself belongs to a table in the model.
   */
  createList<T extends DBPrimitive>(values?: IterableOrArrayLike<T>): IDBList<T>;

  /**
   * Create a new observable DB map.
   *
   * @param items - The initial items for the map.
   *
   * #### Notes
   * The map will not emit change notifications unless it is added
   * to a record which itself belongs to a table in the model.
   */
  createMap<T extends DBPrimitive>(items?: IterableOrArrayLike<[string, T]>): IDBMap<T>;

  /**
   * Create a new observable DB string.
   *
   * @param value - The initial value for the string.
   *
   * #### Notes
   * The string will not emit change notifications unless it is added
   * to a record which itself belongs to a table in the model.
   */
  createString(value?: string): IDBString;

  /**
   * Create a new observable DB record.
   *
   * @param state - The initial state for the record.
   *
   * #### Notes
   * The record will not emit change notifications unless it is added
   * to a table in the model.
   */
  createRecord<T extends DBRecord.State>(state: T): DBRecord<T>;

  /**
   * Create a new observable table.
   *
   * @param token - The token for the type of table to create.
   *
   * @returns A new table of the specified type and name.
   *
   * @throws An exception if the table already exists.
   *
   * #### Notes
   * Creating a table automatically adds it to the model.
   */
  createTable<T extends DBRecord.State>(token: Token<T>): IDBTable<T>;

  /**
   * Test whether the model has a specific table.
   *
   * @param token - The token for the table of interest.
   *
   * @returns `true` if the model has the table, `false` otherwise.
   */
  hasTable<T extends DBRecord.State>(token: Token<T>): boolean;

  /**
   * Get the table for a specific token.
   *
   * @param token - The token for the table of interest.
   *
   * @returns The table for the specified token.
   *
   * @throws An exception if the table does not exist.
   */
  getTable<T extends DBRecord.State>(token: Token<T>): IDBTable<T>;

  /**
   * Delete a table from the model.
   *
   * @param token - The token for the table delete.
   *
   * @throws An exception if the table does not exist.
   */
  deleteTable<T extends DBRecord.State>(token: Token<T>): void;
}


/**
 * The namespace for the `IModelDB` interface statics.
 */
export
namespace IModelDB {
  /**
   * The type of the model db changed arguments.
   */
  export
  type ModelChangedArgs = BaseChangedArgs & {
    /**
     * The type of the change.
     */
    readonly type: 'model:table-created' | 'model:table-deleted';

    /**
     * The model which generated the change.
     */
    readonly target: IModelDB;

    /**
     * The table that was created.
     */
    readonly table: IDBTable<{}>;
  };

  /**
   * The type of the model db child changed arguments.
   */
  export
  type ChildChangedArgs = BaseChangedArgs & {
    /**
     * The type of the change.
     */
    readonly type: 'model:child-changed';

    /**
     * The model which generated the change.
     */
    readonly target: IModelDB;

    /**
     * The changed args for the child change.
     */
    readonly args: IDBTable.ChangedArgs<{}>;
  };

  /**
   * The type of the model db changed arguments.
   */
  export
  type ChangedArgs = ModelChangedArgs | ChildChangedArgs;
}
